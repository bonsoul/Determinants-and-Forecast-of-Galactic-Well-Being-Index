# -*- coding: utf-8 -*-
"""Well Being Index

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JVRc2EtwcmJLJZGqiflkXW4gUiQgvEdl
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math

train_data = pd.read_csv("D:\Downloads\Train_data (1).csv")
test_data = pd.read_csv("D:\Downloads\Validation (1).csv")

train_data.head()

test_data.head()

# Ensure all columns are displayed
pd.set_option('display.max_columns', None)

# Calculate percentage of missing values per column
missing_percentage = (train_data.isnull().sum() / len(train_data)) * 100

# Print missing values sorted in descending order
print(missing_percentage.sort_values(ascending=False).head(30))

# Check for missing data and identify numeric columns
missing_data = train_data.isnull().mean().sort_values(ascending=False)
numeric_df = train_data.select_dtypes(include=['number'])

# Check how many numeric columns we have and preview missingness
numeric_df.shape, missing_data.head(30)

# Ensure all columns are displayed
pd.set_option('display.max_columns', None)

# Calculate percentage of missing values per column
missing_percentage = (test_data.isnull().sum() / len(test_data)) * 100

# Print missing values sorted in descending order
print(missing_percentage.sort_values(ascending=False).head(50))

#drop ID column on both datasets

train_data8 = train_data.drop('ID', axis=1)
test_data8 = test_data.drop('ID', axis=1)


merge_data = pd.concat([train_data8,test_data8])

# Ensure only numeric columns are considered
numeric_cols = train_data8.select_dtypes(include=['number']).columns

# Define a threshold for dropping (e.g., 95% zeros)
zero_threshold = 0.20

# Compute the proportion of zeros in each numeric column (ignoring NaNs)
zero_proportion = (merge_data[numeric_cols] == 0).mean()

# Identify columns to drop based on threshold
columns_to_drop = zero_proportion[zero_proportion > zero_threshold].index

# Drop the identified columns from both datasets
train_data.drop(columns=columns_to_drop, inplace=True, errors='ignore')
test_data.drop(columns=columns_to_drop, inplace=True, errors='ignore')

print(f"Dropped columns: {list(columns_to_drop)}")

# Drop columns with more than 50% missing values
threshold = 0.5
# Recalculate missing_data using train_data8
missing_data_updated = merge_data.isnull().mean().sort_values(ascending=False)
valid_cols = missing_data_updated[missing_data_updated < threshold].index
clean_df = train_data8[valid_cols]

# Drop non-numeric columns and isolate target
numeric_clean_df = clean_df.select_dtypes(include=['number'])

# Separate features and target
features = numeric_clean_df.drop(columns=['Well-Being Index'], errors='ignore')
target = numeric_clean_df['Well-Being Index']

# Impute missing values with median
features_imputed = features.fillna(features.median())

features_imputed.shape, target.shape

features_imputed.head()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Intergalactic Development Index (IDI)'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Distribution of Development Index (IDI)', color='white')
axes[0].set_xlabel('Development Index (IDI)')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Intergalactic Development Index (IDI)'], ax=axes[1])
axes[1].set_title('Box plot of Development Index (IDI)', color='white')
axes[1].set_xlabel('Development Index (IDI)')
axes[1].set_ylabel('')

plt.tight_layout()
plt.show()

features_imputed.columns

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Population using at least basic sanitation services (%)'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Population using at least basic sanitation services (%)', color='white')
axes[0].set_xlabel('Population using at least basic sanitation services (%)')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Population using at least basic sanitation services (%)'], ax=axes[1])
axes[1].set_title('Box plot of Population using at least basic sanitation services (%)', color='white')
axes[1].set_xlabel('Population using at least basic sanitation services (%)')
axes[1].set_ylabel('')

plt.tight_layout()
plt.show()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Population using at least basic drinking-water services (%)'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Population using at least basic drinking-water services (%)', color='white')
axes[0].set_xlabel('Population using at least basic sanitation services (%)')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Population using at least basic drinking-water services (%)'], ax=axes[1])
axes[1].set_title('Population using at least basic drinking-water services (%)', color='white')
axes[1].set_xlabel('Population using at least basic drinking-water services (%)')
axes[1].set_ylabel('')

plt.tight_layout()
plt.show()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Intergalactic Development Index (IDI), Rank'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('Intergalactic Development Index (IDI), Rank')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Intergalactic Development Index (IDI), Rank'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('Intergalactic Development Index (IDI), Rank')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Education Index'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('Education Index')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Education Index'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('Education Index')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

#Mean years of education (galactic years)

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Mean years of education (galactic years)'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('Mean years of education (galactic years)')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Mean years of education (galactic years)'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('Mean years of education (galactic years)')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

#Expected years of education (galactic years)

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Expected years of education (galactic years)'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('Expected years of education (galactic years)')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Expected years of education (galactic years)'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('Expected years of education (galactic years)')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

#Expected years of education (galactic years)

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Gross income per capita'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('Gross income per capita')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Gross income per capita'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('Gross income per capita')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['Income Index'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('Income Index')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['Income Index'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('Income Index')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['existence expectancy index'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('existence expectancy index')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['existence expectancy index'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('existence expectancy index')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['existence expectancy at birth'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('existence expectancy at birth')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['existence expectancy at birth'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('existence expectancy at birth')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

#galactic year

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot for Development Index (IDI)
sns.histplot(features_imputed['galactic year'], bins=10, kde=True, ax=axes[0])
axes[0].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[0].set_xlabel('galactic year')
axes[0].set_ylabel('Frequency')

# Box plot for Development Index (IDI)
sns.boxplot(x=features_imputed['galactic year'], ax=axes[1])
axes[1].set_title('Intergalactic Development Index (IDI), Rank', color='white')
axes[1].set_xlabel('galactic year')
axes[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()

# Compute correlation matrix
corr = features_imputed.corr()

    # Plot heatmap
fig, ax = plt.subplots(figsize=(10, 8))
mask = np.triu(np.ones_like(corr, dtype=bool))
sns.heatmap(corr, mask=mask, cmap='mako', annot=True, linewidths=0.5, fmt=".2f", annot_kws={"size": 8})
plt.title('Correlation Matrix', fontsize=14)
plt.tight_layout()
plt.show()

# separate featured and target

X = features_imputed
y =  target


from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
import xgboost as xgb
from sklearn.model_selection import train_test_split
import lightgbm as lgb
from sklearn.metrics import mean_squared_error, r2_score, root_mean_squared_error
from sklearn.feature_selection import mutual_info_regression


X_test,X_train,y_test,y_train = train_test_split(X,y)

# Assuming X and y are your features and target
mutual_info = mutual_info_regression(X, y)
mi_df = pd.DataFrame({'Feature': X.columns, 'Mutual Information': mutual_info})
mi_df = mi_df.sort_values(by='Mutual Information', ascending=False)


# Create the barh plot using seaborn, addressing the FutureWarning
plt.figure(figsize=(10, 6))
sns.barplot(data=mi_df, x='Mutual Information', y='Feature', hue='Feature', palette='viridis', dodge=False, legend=False)
plt.title('Feature Importance based on Mutual Information')
plt.xlabel('Mutual Information Score')
plt.ylabel('Feature')
plt.tight_layout()
plt.show()

# Train XGBoost model
model = xgb.XGBRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Plot top 100 features by gain
fig, ax = plt.subplots(figsize=(10, 4))
xgb.plot_importance(model, max_num_features=100, importance_type='gain', ax=ax)
plt.title("Top 10 Feature Importances (XGBoost)")
plt.show()

# Clean column names


import warnings
warnings.filterwarnings('ignore')


X_train.columns = X_train.columns.str.replace(r'[^\w]', '_', regex=True)
X_test.columns = X_test.columns.str.replace(r'[^\w]', '_', regex=True)

# Now fit the model
model.fit(X_train, y_train)

# Create and train the LGBM Regressor
model = lgb.LGBMRegressor(
    objective='regression',
    metric='rmse',
    random_state=42,
    n_estimators=100
)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model using RMSE
rmse = root_mean_squared_error(y_test, y_pred)
print(f"RMSE: {rmse}")

# Adjust the figure and axes creation
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Histogram plot
sns.histplot(y_pred, bins=10, kde=True, ax=axes[0])
axes[0].set_title('Distribution of preds')
axes[0].set_xlabel('Value')
axes[0].set_ylabel('Frequency')

# Box plot
sns.boxplot(x=y_pred, ax=axes[1])
axes[1].set_title('Box plot of preds')
axes[1].set_xlabel('Value')
axes[1].set_ylabel('')

plt.tight_layout()
plt.show()

# Create a DataFrame with actual vs predicted
val_results = pd.DataFrame({
    "Galaxy_ID": X_test.index,
    "Actual_WellBeing": y_test,
    "Predicted_WellBeing": y_pred
})

# Save to CSV
version = 1  # Change this version number as needed
val_results.to_csv(f"validation_results_v{version}.csv", index=False)

# Display the first few rows
val_results.head()